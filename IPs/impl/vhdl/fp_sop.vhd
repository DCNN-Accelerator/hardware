-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fp_sop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    kernel_patch_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_8 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_9 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_10 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_11 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_12 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_13 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_14 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_15 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_16 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_17 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_18 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_19 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_20 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_21 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_22 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_23 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_24 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_25 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_26 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_27 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_28 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_29 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_30 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_31 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_32 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_33 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_34 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_35 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_36 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_37 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_38 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_39 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_40 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_41 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_42 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_43 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_44 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_45 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_46 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_47 : IN STD_LOGIC_VECTOR (7 downto 0);
    kernel_patch_48 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_0 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_4 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_5 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_6 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_7 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_8 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_9 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_10 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_11 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_12 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_13 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_14 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_15 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_16 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_17 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_18 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_19 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_20 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_21 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_22 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_23 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_24 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_25 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_26 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_27 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_28 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_29 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_30 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_31 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_32 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_33 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_34 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_35 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_36 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_37 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_38 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_39 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_40 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_41 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_42 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_43 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_44 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_45 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_46 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_47 : IN STD_LOGIC_VECTOR (7 downto 0);
    pixel_window_48 : IN STD_LOGIC_VECTOR (7 downto 0);
    out_val : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_val_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fp_sop is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fp_sop,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=11.217000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=32,HLS_SYN_FF=740,HLS_SYN_LUT=1002,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal pixel_window_42_read_reg_1597 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_39_read_reg_1602 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_36_read_reg_1607 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_33_read_reg_1612 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_30_read_reg_1617 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_27_read_reg_1622 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_24_read_reg_1627 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_21_read_reg_1632 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_18_read_reg_1637 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_15_read_reg_1642 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_12_read_reg_1647 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_9_read_reg_1652 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_6_read_reg_1657 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_3_read_reg_1662 : STD_LOGIC_VECTOR (7 downto 0);
    signal pixel_window_1_read_reg_1667 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_42_read_reg_1672 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_39_read_reg_1677 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_36_read_reg_1682 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_33_read_reg_1687 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_30_read_reg_1692 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_27_read_reg_1697 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_24_read_reg_1702 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_21_read_reg_1707 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_18_read_reg_1712 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_15_read_reg_1717 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_12_read_reg_1722 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_9_read_reg_1727 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_6_read_reg_1732 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_3_read_reg_1737 : STD_LOGIC_VECTOR (7 downto 0);
    signal kernel_patch_1_read_reg_1742 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1347_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_reg_1747 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1355_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_2_reg_1752 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1363_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_5_reg_1757 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1371_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_7_reg_1762 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1379_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_11_reg_1767 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1387_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_13_reg_1772 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1395_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_16_reg_1777 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1403_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_18_reg_1782 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1411_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_23_reg_1787 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1419_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_25_reg_1792 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1427_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_28_reg_1797 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1435_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_30_reg_1802 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1443_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_34_reg_1807 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1451_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_36_reg_1812 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1459_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_39_reg_1817 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1467_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_41_reg_1822 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1475_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_42_reg_1827 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1483_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_1_reg_1832 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1490_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_3_reg_1837 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_9_fu_1275_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln178_9_fu_1275_p2 : signal is "no";
    signal add_ln178_9_reg_1842 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1513_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_12_reg_1847 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1520_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_14_reg_1852 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_20_fu_1279_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln178_20_fu_1279_p2 : signal is "no";
    signal add_ln178_20_reg_1857 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_27_fu_1283_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln178_27_fu_1283_p2 : signal is "no";
    signal add_ln178_27_reg_1862 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_32_fu_1287_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln178_32_fu_1287_p2 : signal is "no";
    signal add_ln178_32_reg_1867 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1575_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_35_reg_1872 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1582_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_37_reg_1877 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_44_fu_1295_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln178_44_fu_1295_p2 : signal is "no";
    signal add_ln178_44_reg_1882 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_10_fu_1304_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_10_reg_1887 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_21_fu_1313_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_21_reg_1892 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_46_fu_1331_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_46_reg_1897 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mul_ln123_fu_819_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln123_fu_819_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln127_fu_841_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln127_fu_841_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln130_fu_863_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln130_fu_863_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln134_fu_885_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln134_fu_885_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln137_fu_907_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln137_fu_907_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln140_fu_929_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln140_fu_929_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln143_fu_951_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln143_fu_951_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln147_fu_973_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln147_fu_973_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln150_fu_995_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln150_fu_995_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln153_fu_1017_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln153_fu_1017_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln157_fu_1039_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln157_fu_1039_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln160_fu_1061_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln160_fu_1061_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln163_fu_1083_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln163_fu_1083_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln167_fu_1105_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln167_fu_1105_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln170_fu_1127_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln170_fu_1127_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln172_fu_1149_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln172_fu_1149_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln174_fu_1171_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln174_fu_1171_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1505_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1497_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1535_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1527_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1551_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1543_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1567_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1559_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_43_fu_1291_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln178_43_fu_1291_p2 : signal is "no";
    signal grp_fu_1589_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_4_fu_1300_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln178_4_fu_1300_p2 : signal is "no";
    signal add_ln178_15_fu_1309_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln178_15_fu_1309_p2 : signal is "no";
    signal add_ln178_38_fu_1322_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln178_38_fu_1322_p2 : signal is "no";
    signal add_ln178_45_fu_1326_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_33_fu_1318_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln178_22_fu_1337_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1347_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1347_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1355_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1355_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1363_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1371_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1371_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1379_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1379_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1387_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1387_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1395_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1395_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1403_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1403_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1411_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1411_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1419_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1419_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1427_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1427_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1435_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1435_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1443_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1443_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1451_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1451_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1459_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1459_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1467_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1467_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1475_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1475_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1483_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1490_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1497_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1505_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1513_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1520_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1527_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1535_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1543_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1551_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1559_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1567_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1575_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1582_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1589_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1347_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1355_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1363_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1371_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1379_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1387_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1395_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1403_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1411_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1419_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1427_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1435_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1443_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1451_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1459_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1467_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1475_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1483_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1490_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1497_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1505_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1513_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1520_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1527_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1535_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1543_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1551_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1559_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1567_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1575_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1582_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1589_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln123_fu_819_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln127_fu_841_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln130_fu_863_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln134_fu_885_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln137_fu_907_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln140_fu_929_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln143_fu_951_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln147_fu_973_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln150_fu_995_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln153_fu_1017_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln157_fu_1039_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln160_fu_1061_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln163_fu_1083_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln167_fu_1105_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln170_fu_1127_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln172_fu_1149_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln174_fu_1171_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component fp_sop_mac_muladdbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fp_sop_mac_muladdcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    fp_sop_mac_muladdbkb_U1 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1347_p0,
        din1 => kernel_patch_2,
        din2 => grp_fu_1347_p2,
        dout => grp_fu_1347_p3);

    fp_sop_mac_muladdbkb_U2 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1355_p0,
        din1 => kernel_patch_5,
        din2 => grp_fu_1355_p2,
        dout => grp_fu_1355_p3);

    fp_sop_mac_muladdbkb_U3 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1363_p0,
        din1 => kernel_patch_8,
        din2 => grp_fu_1363_p2,
        dout => grp_fu_1363_p3);

    fp_sop_mac_muladdbkb_U4 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1371_p0,
        din1 => kernel_patch_11,
        din2 => grp_fu_1371_p2,
        dout => grp_fu_1371_p3);

    fp_sop_mac_muladdbkb_U5 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1379_p0,
        din1 => kernel_patch_14,
        din2 => grp_fu_1379_p2,
        dout => grp_fu_1379_p3);

    fp_sop_mac_muladdbkb_U6 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1387_p0,
        din1 => kernel_patch_17,
        din2 => grp_fu_1387_p2,
        dout => grp_fu_1387_p3);

    fp_sop_mac_muladdbkb_U7 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1395_p0,
        din1 => kernel_patch_20,
        din2 => grp_fu_1395_p2,
        dout => grp_fu_1395_p3);

    fp_sop_mac_muladdbkb_U8 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1403_p0,
        din1 => kernel_patch_23,
        din2 => grp_fu_1403_p2,
        dout => grp_fu_1403_p3);

    fp_sop_mac_muladdbkb_U9 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1411_p0,
        din1 => kernel_patch_26,
        din2 => grp_fu_1411_p2,
        dout => grp_fu_1411_p3);

    fp_sop_mac_muladdbkb_U10 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1419_p0,
        din1 => kernel_patch_29,
        din2 => grp_fu_1419_p2,
        dout => grp_fu_1419_p3);

    fp_sop_mac_muladdbkb_U11 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1427_p0,
        din1 => kernel_patch_32,
        din2 => grp_fu_1427_p2,
        dout => grp_fu_1427_p3);

    fp_sop_mac_muladdbkb_U12 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1435_p0,
        din1 => kernel_patch_35,
        din2 => grp_fu_1435_p2,
        dout => grp_fu_1435_p3);

    fp_sop_mac_muladdbkb_U13 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1443_p0,
        din1 => kernel_patch_38,
        din2 => grp_fu_1443_p2,
        dout => grp_fu_1443_p3);

    fp_sop_mac_muladdbkb_U14 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1451_p0,
        din1 => kernel_patch_41,
        din2 => grp_fu_1451_p2,
        dout => grp_fu_1451_p3);

    fp_sop_mac_muladdbkb_U15 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1459_p0,
        din1 => kernel_patch_44,
        din2 => grp_fu_1459_p2,
        dout => grp_fu_1459_p3);

    fp_sop_mac_muladdbkb_U16 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1467_p0,
        din1 => kernel_patch_46,
        din2 => grp_fu_1467_p2,
        dout => grp_fu_1467_p3);

    fp_sop_mac_muladdbkb_U17 : component fp_sop_mac_muladdbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1475_p0,
        din1 => kernel_patch_48,
        din2 => grp_fu_1475_p2,
        dout => grp_fu_1475_p3);

    fp_sop_mac_muladdcud_U18 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1483_p0,
        din1 => kernel_patch_1_read_reg_1742,
        din2 => add_ln178_reg_1747,
        dout => grp_fu_1483_p3);

    fp_sop_mac_muladdcud_U19 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1490_p0,
        din1 => kernel_patch_3_read_reg_1737,
        din2 => add_ln178_2_reg_1752,
        dout => grp_fu_1490_p3);

    fp_sop_mac_muladdcud_U20 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1497_p0,
        din1 => kernel_patch_6_read_reg_1732,
        din2 => add_ln178_5_reg_1757,
        dout => grp_fu_1497_p3);

    fp_sop_mac_muladdcud_U21 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1505_p0,
        din1 => kernel_patch_9_read_reg_1727,
        din2 => add_ln178_7_reg_1762,
        dout => grp_fu_1505_p3);

    fp_sop_mac_muladdcud_U22 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1513_p0,
        din1 => kernel_patch_12_read_reg_1722,
        din2 => add_ln178_11_reg_1767,
        dout => grp_fu_1513_p3);

    fp_sop_mac_muladdcud_U23 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1520_p0,
        din1 => kernel_patch_15_read_reg_1717,
        din2 => add_ln178_13_reg_1772,
        dout => grp_fu_1520_p3);

    fp_sop_mac_muladdcud_U24 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1527_p0,
        din1 => kernel_patch_18_read_reg_1712,
        din2 => add_ln178_16_reg_1777,
        dout => grp_fu_1527_p3);

    fp_sop_mac_muladdcud_U25 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1535_p0,
        din1 => kernel_patch_21_read_reg_1707,
        din2 => add_ln178_18_reg_1782,
        dout => grp_fu_1535_p3);

    fp_sop_mac_muladdcud_U26 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1543_p0,
        din1 => kernel_patch_24_read_reg_1702,
        din2 => add_ln178_23_reg_1787,
        dout => grp_fu_1543_p3);

    fp_sop_mac_muladdcud_U27 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1551_p0,
        din1 => kernel_patch_27_read_reg_1697,
        din2 => add_ln178_25_reg_1792,
        dout => grp_fu_1551_p3);

    fp_sop_mac_muladdcud_U28 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1559_p0,
        din1 => kernel_patch_30_read_reg_1692,
        din2 => add_ln178_28_reg_1797,
        dout => grp_fu_1559_p3);

    fp_sop_mac_muladdcud_U29 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1567_p0,
        din1 => kernel_patch_33_read_reg_1687,
        din2 => add_ln178_30_reg_1802,
        dout => grp_fu_1567_p3);

    fp_sop_mac_muladdcud_U30 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1575_p0,
        din1 => kernel_patch_36_read_reg_1682,
        din2 => add_ln178_34_reg_1807,
        dout => grp_fu_1575_p3);

    fp_sop_mac_muladdcud_U31 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1582_p0,
        din1 => kernel_patch_39_read_reg_1677,
        din2 => add_ln178_36_reg_1812,
        dout => grp_fu_1582_p3);

    fp_sop_mac_muladdcud_U32 : component fp_sop_mac_muladdcud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1589_p0,
        din1 => kernel_patch_42_read_reg_1672,
        din2 => add_ln178_39_reg_1817,
        dout => grp_fu_1589_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln178_10_reg_1887 <= add_ln178_10_fu_1304_p2;
                add_ln178_21_reg_1892 <= add_ln178_21_fu_1313_p2;
                add_ln178_46_reg_1897 <= add_ln178_46_fu_1331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln178_11_reg_1767 <= grp_fu_1379_p3;
                add_ln178_13_reg_1772 <= grp_fu_1387_p3;
                add_ln178_16_reg_1777 <= grp_fu_1395_p3;
                add_ln178_18_reg_1782 <= grp_fu_1403_p3;
                add_ln178_23_reg_1787 <= grp_fu_1411_p3;
                add_ln178_25_reg_1792 <= grp_fu_1419_p3;
                add_ln178_28_reg_1797 <= grp_fu_1427_p3;
                add_ln178_2_reg_1752 <= grp_fu_1355_p3;
                add_ln178_30_reg_1802 <= grp_fu_1435_p3;
                add_ln178_34_reg_1807 <= grp_fu_1443_p3;
                add_ln178_36_reg_1812 <= grp_fu_1451_p3;
                add_ln178_39_reg_1817 <= grp_fu_1459_p3;
                add_ln178_41_reg_1822 <= grp_fu_1467_p3;
                add_ln178_42_reg_1827 <= grp_fu_1475_p3;
                add_ln178_5_reg_1757 <= grp_fu_1363_p3;
                add_ln178_7_reg_1762 <= grp_fu_1371_p3;
                add_ln178_reg_1747 <= grp_fu_1347_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln178_12_reg_1847 <= grp_fu_1513_p3;
                add_ln178_14_reg_1852 <= grp_fu_1520_p3;
                add_ln178_1_reg_1832 <= grp_fu_1483_p3;
                add_ln178_35_reg_1872 <= grp_fu_1575_p3;
                add_ln178_37_reg_1877 <= grp_fu_1582_p3;
                add_ln178_3_reg_1837 <= grp_fu_1490_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln178_20_reg_1857 <= add_ln178_20_fu_1279_p2;
                add_ln178_27_reg_1862 <= add_ln178_27_fu_1283_p2;
                add_ln178_32_reg_1867 <= add_ln178_32_fu_1287_p2;
                add_ln178_44_reg_1882 <= add_ln178_44_fu_1295_p2;
                add_ln178_9_reg_1842 <= add_ln178_9_fu_1275_p2;
                kernel_patch_12_read_reg_1722 <= kernel_patch_12;
                kernel_patch_15_read_reg_1717 <= kernel_patch_15;
                kernel_patch_18_read_reg_1712 <= kernel_patch_18;
                kernel_patch_1_read_reg_1742 <= kernel_patch_1;
                kernel_patch_21_read_reg_1707 <= kernel_patch_21;
                kernel_patch_24_read_reg_1702 <= kernel_patch_24;
                kernel_patch_27_read_reg_1697 <= kernel_patch_27;
                kernel_patch_30_read_reg_1692 <= kernel_patch_30;
                kernel_patch_33_read_reg_1687 <= kernel_patch_33;
                kernel_patch_36_read_reg_1682 <= kernel_patch_36;
                kernel_patch_39_read_reg_1677 <= kernel_patch_39;
                kernel_patch_3_read_reg_1737 <= kernel_patch_3;
                kernel_patch_42_read_reg_1672 <= kernel_patch_42;
                kernel_patch_6_read_reg_1732 <= kernel_patch_6;
                kernel_patch_9_read_reg_1727 <= kernel_patch_9;
                pixel_window_12_read_reg_1647 <= pixel_window_12;
                pixel_window_15_read_reg_1642 <= pixel_window_15;
                pixel_window_18_read_reg_1637 <= pixel_window_18;
                pixel_window_1_read_reg_1667 <= pixel_window_1;
                pixel_window_21_read_reg_1632 <= pixel_window_21;
                pixel_window_24_read_reg_1627 <= pixel_window_24;
                pixel_window_27_read_reg_1622 <= pixel_window_27;
                pixel_window_30_read_reg_1617 <= pixel_window_30;
                pixel_window_33_read_reg_1612 <= pixel_window_33;
                pixel_window_36_read_reg_1607 <= pixel_window_36;
                pixel_window_39_read_reg_1602 <= pixel_window_39;
                pixel_window_3_read_reg_1662 <= pixel_window_3;
                pixel_window_42_read_reg_1597 <= pixel_window_42;
                pixel_window_6_read_reg_1657 <= pixel_window_6;
                pixel_window_9_read_reg_1652 <= pixel_window_9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln178_10_fu_1304_p2 <= std_logic_vector(unsigned(add_ln178_9_reg_1842) + unsigned(add_ln178_4_fu_1300_p2));
    add_ln178_15_fu_1309_p2 <= std_logic_vector(signed(add_ln178_14_reg_1852) + signed(add_ln178_12_reg_1847));
    add_ln178_20_fu_1279_p2 <= std_logic_vector(signed(grp_fu_1535_p3) + signed(grp_fu_1527_p3));
    add_ln178_21_fu_1313_p2 <= std_logic_vector(unsigned(add_ln178_20_reg_1857) + unsigned(add_ln178_15_fu_1309_p2));
    add_ln178_22_fu_1337_p2 <= std_logic_vector(unsigned(add_ln178_21_reg_1892) + unsigned(add_ln178_10_reg_1887));
    add_ln178_27_fu_1283_p2 <= std_logic_vector(signed(grp_fu_1551_p3) + signed(grp_fu_1543_p3));
    add_ln178_32_fu_1287_p2 <= std_logic_vector(signed(grp_fu_1567_p3) + signed(grp_fu_1559_p3));
    add_ln178_33_fu_1318_p2 <= std_logic_vector(unsigned(add_ln178_32_reg_1867) + unsigned(add_ln178_27_reg_1862));
    add_ln178_38_fu_1322_p2 <= std_logic_vector(signed(add_ln178_37_reg_1877) + signed(add_ln178_35_reg_1872));
    add_ln178_43_fu_1291_p2 <= std_logic_vector(signed(add_ln178_42_reg_1827) + signed(add_ln178_41_reg_1822));
    add_ln178_44_fu_1295_p2 <= std_logic_vector(unsigned(add_ln178_43_fu_1291_p2) + unsigned(grp_fu_1589_p3));
    add_ln178_45_fu_1326_p2 <= std_logic_vector(unsigned(add_ln178_44_reg_1882) + unsigned(add_ln178_38_fu_1322_p2));
    add_ln178_46_fu_1331_p2 <= std_logic_vector(unsigned(add_ln178_45_fu_1326_p2) + unsigned(add_ln178_33_fu_1318_p2));
    add_ln178_4_fu_1300_p2 <= std_logic_vector(signed(add_ln178_3_reg_1837) + signed(add_ln178_1_reg_1832));
    add_ln178_9_fu_1275_p2 <= std_logic_vector(signed(grp_fu_1505_p3) + signed(grp_fu_1497_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1347_p0 <= grp_fu_1347_p00(8 - 1 downto 0);
    grp_fu_1347_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_2),16));
    grp_fu_1347_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln123_fu_819_p0) * signed(mul_ln123_fu_819_p1))), 16));
    grp_fu_1355_p0 <= grp_fu_1355_p00(8 - 1 downto 0);
    grp_fu_1355_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_5),16));
    grp_fu_1355_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln127_fu_841_p0) * signed(mul_ln127_fu_841_p1))), 16));
    grp_fu_1363_p0 <= grp_fu_1363_p00(8 - 1 downto 0);
    grp_fu_1363_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_8),16));
    grp_fu_1363_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln130_fu_863_p0) * signed(mul_ln130_fu_863_p1))), 16));
    grp_fu_1371_p0 <= grp_fu_1371_p00(8 - 1 downto 0);
    grp_fu_1371_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_11),16));
    grp_fu_1371_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln134_fu_885_p0) * signed(mul_ln134_fu_885_p1))), 16));
    grp_fu_1379_p0 <= grp_fu_1379_p00(8 - 1 downto 0);
    grp_fu_1379_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_14),16));
    grp_fu_1379_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln137_fu_907_p0) * signed(mul_ln137_fu_907_p1))), 16));
    grp_fu_1387_p0 <= grp_fu_1387_p00(8 - 1 downto 0);
    grp_fu_1387_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_17),16));
    grp_fu_1387_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln140_fu_929_p0) * signed(mul_ln140_fu_929_p1))), 16));
    grp_fu_1395_p0 <= grp_fu_1395_p00(8 - 1 downto 0);
    grp_fu_1395_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_20),16));
    grp_fu_1395_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln143_fu_951_p0) * signed(mul_ln143_fu_951_p1))), 16));
    grp_fu_1403_p0 <= grp_fu_1403_p00(8 - 1 downto 0);
    grp_fu_1403_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_23),16));
    grp_fu_1403_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln147_fu_973_p0) * signed(mul_ln147_fu_973_p1))), 16));
    grp_fu_1411_p0 <= grp_fu_1411_p00(8 - 1 downto 0);
    grp_fu_1411_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_26),16));
    grp_fu_1411_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln150_fu_995_p0) * signed(mul_ln150_fu_995_p1))), 16));
    grp_fu_1419_p0 <= grp_fu_1419_p00(8 - 1 downto 0);
    grp_fu_1419_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_29),16));
    grp_fu_1419_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln153_fu_1017_p0) * signed(mul_ln153_fu_1017_p1))), 16));
    grp_fu_1427_p0 <= grp_fu_1427_p00(8 - 1 downto 0);
    grp_fu_1427_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_32),16));
    grp_fu_1427_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln157_fu_1039_p0) * signed(mul_ln157_fu_1039_p1))), 16));
    grp_fu_1435_p0 <= grp_fu_1435_p00(8 - 1 downto 0);
    grp_fu_1435_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_35),16));
    grp_fu_1435_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln160_fu_1061_p0) * signed(mul_ln160_fu_1061_p1))), 16));
    grp_fu_1443_p0 <= grp_fu_1443_p00(8 - 1 downto 0);
    grp_fu_1443_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_38),16));
    grp_fu_1443_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln163_fu_1083_p0) * signed(mul_ln163_fu_1083_p1))), 16));
    grp_fu_1451_p0 <= grp_fu_1451_p00(8 - 1 downto 0);
    grp_fu_1451_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_41),16));
    grp_fu_1451_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln167_fu_1105_p0) * signed(mul_ln167_fu_1105_p1))), 16));
    grp_fu_1459_p0 <= grp_fu_1459_p00(8 - 1 downto 0);
    grp_fu_1459_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_44),16));
    grp_fu_1459_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln170_fu_1127_p0) * signed(mul_ln170_fu_1127_p1))), 16));
    grp_fu_1467_p0 <= grp_fu_1467_p00(8 - 1 downto 0);
    grp_fu_1467_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_46),16));
    grp_fu_1467_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln172_fu_1149_p0) * signed(mul_ln172_fu_1149_p1))), 16));
    grp_fu_1475_p0 <= grp_fu_1475_p00(8 - 1 downto 0);
    grp_fu_1475_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_48),16));
    grp_fu_1475_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln174_fu_1171_p0) * signed(mul_ln174_fu_1171_p1))), 16));
    grp_fu_1483_p0 <= grp_fu_1483_p00(8 - 1 downto 0);
    grp_fu_1483_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_1_read_reg_1667),16));
    grp_fu_1490_p0 <= grp_fu_1490_p00(8 - 1 downto 0);
    grp_fu_1490_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_3_read_reg_1662),16));
    grp_fu_1497_p0 <= grp_fu_1497_p00(8 - 1 downto 0);
    grp_fu_1497_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_6_read_reg_1657),16));
    grp_fu_1505_p0 <= grp_fu_1505_p00(8 - 1 downto 0);
    grp_fu_1505_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_9_read_reg_1652),16));
    grp_fu_1513_p0 <= grp_fu_1513_p00(8 - 1 downto 0);
    grp_fu_1513_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_12_read_reg_1647),16));
    grp_fu_1520_p0 <= grp_fu_1520_p00(8 - 1 downto 0);
    grp_fu_1520_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_15_read_reg_1642),16));
    grp_fu_1527_p0 <= grp_fu_1527_p00(8 - 1 downto 0);
    grp_fu_1527_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_18_read_reg_1637),16));
    grp_fu_1535_p0 <= grp_fu_1535_p00(8 - 1 downto 0);
    grp_fu_1535_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_21_read_reg_1632),16));
    grp_fu_1543_p0 <= grp_fu_1543_p00(8 - 1 downto 0);
    grp_fu_1543_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_24_read_reg_1627),16));
    grp_fu_1551_p0 <= grp_fu_1551_p00(8 - 1 downto 0);
    grp_fu_1551_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_27_read_reg_1622),16));
    grp_fu_1559_p0 <= grp_fu_1559_p00(8 - 1 downto 0);
    grp_fu_1559_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_30_read_reg_1617),16));
    grp_fu_1567_p0 <= grp_fu_1567_p00(8 - 1 downto 0);
    grp_fu_1567_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_33_read_reg_1612),16));
    grp_fu_1575_p0 <= grp_fu_1575_p00(8 - 1 downto 0);
    grp_fu_1575_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_36_read_reg_1607),16));
    grp_fu_1582_p0 <= grp_fu_1582_p00(8 - 1 downto 0);
    grp_fu_1582_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_39_read_reg_1602),16));
    grp_fu_1589_p0 <= grp_fu_1589_p00(8 - 1 downto 0);
    grp_fu_1589_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_42_read_reg_1597),16));
    mul_ln123_fu_819_p0 <= mul_ln123_fu_819_p00(8 - 1 downto 0);
    mul_ln123_fu_819_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_0),16));
    mul_ln123_fu_819_p1 <= kernel_patch_0;
    mul_ln127_fu_841_p0 <= mul_ln127_fu_841_p00(8 - 1 downto 0);
    mul_ln127_fu_841_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_4),16));
    mul_ln127_fu_841_p1 <= kernel_patch_4;
    mul_ln130_fu_863_p0 <= mul_ln130_fu_863_p00(8 - 1 downto 0);
    mul_ln130_fu_863_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_7),16));
    mul_ln130_fu_863_p1 <= kernel_patch_7;
    mul_ln134_fu_885_p0 <= mul_ln134_fu_885_p00(8 - 1 downto 0);
    mul_ln134_fu_885_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_10),16));
    mul_ln134_fu_885_p1 <= kernel_patch_10;
    mul_ln137_fu_907_p0 <= mul_ln137_fu_907_p00(8 - 1 downto 0);
    mul_ln137_fu_907_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_13),16));
    mul_ln137_fu_907_p1 <= kernel_patch_13;
    mul_ln140_fu_929_p0 <= mul_ln140_fu_929_p00(8 - 1 downto 0);
    mul_ln140_fu_929_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_16),16));
    mul_ln140_fu_929_p1 <= kernel_patch_16;
    mul_ln143_fu_951_p0 <= mul_ln143_fu_951_p00(8 - 1 downto 0);
    mul_ln143_fu_951_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_19),16));
    mul_ln143_fu_951_p1 <= kernel_patch_19;
    mul_ln147_fu_973_p0 <= mul_ln147_fu_973_p00(8 - 1 downto 0);
    mul_ln147_fu_973_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_22),16));
    mul_ln147_fu_973_p1 <= kernel_patch_22;
    mul_ln150_fu_995_p0 <= mul_ln150_fu_995_p00(8 - 1 downto 0);
    mul_ln150_fu_995_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_25),16));
    mul_ln150_fu_995_p1 <= kernel_patch_25;
    mul_ln153_fu_1017_p0 <= mul_ln153_fu_1017_p00(8 - 1 downto 0);
    mul_ln153_fu_1017_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_28),16));
    mul_ln153_fu_1017_p1 <= kernel_patch_28;
    mul_ln157_fu_1039_p0 <= mul_ln157_fu_1039_p00(8 - 1 downto 0);
    mul_ln157_fu_1039_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_31),16));
    mul_ln157_fu_1039_p1 <= kernel_patch_31;
    mul_ln160_fu_1061_p0 <= mul_ln160_fu_1061_p00(8 - 1 downto 0);
    mul_ln160_fu_1061_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_34),16));
    mul_ln160_fu_1061_p1 <= kernel_patch_34;
    mul_ln163_fu_1083_p0 <= mul_ln163_fu_1083_p00(8 - 1 downto 0);
    mul_ln163_fu_1083_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_37),16));
    mul_ln163_fu_1083_p1 <= kernel_patch_37;
    mul_ln167_fu_1105_p0 <= mul_ln167_fu_1105_p00(8 - 1 downto 0);
    mul_ln167_fu_1105_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_40),16));
    mul_ln167_fu_1105_p1 <= kernel_patch_40;
    mul_ln170_fu_1127_p0 <= mul_ln170_fu_1127_p00(8 - 1 downto 0);
    mul_ln170_fu_1127_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_43),16));
    mul_ln170_fu_1127_p1 <= kernel_patch_43;
    mul_ln172_fu_1149_p0 <= mul_ln172_fu_1149_p00(8 - 1 downto 0);
    mul_ln172_fu_1149_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_45),16));
    mul_ln172_fu_1149_p1 <= kernel_patch_45;
    mul_ln174_fu_1171_p0 <= mul_ln174_fu_1171_p00(8 - 1 downto 0);
    mul_ln174_fu_1171_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pixel_window_47),16));
    mul_ln174_fu_1171_p1 <= kernel_patch_47;
    out_val <= std_logic_vector(unsigned(add_ln178_46_reg_1897) + unsigned(add_ln178_22_fu_1337_p2));

    out_val_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_val_ap_vld <= ap_const_logic_1;
        else 
            out_val_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
